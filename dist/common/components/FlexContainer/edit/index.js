import React from 'react';
import ReactDOM from 'react-dom';
import _ from 'lodash';
import { nextId, startPushNode, endPushNode } from '../../../utils/editable';
import FlexContainer from '..';

const editable = options => WrapConponent => {
  let nextid = 0;
  /**
   * 判断当前组件是否有可编辑节点
   */

  function hasEditableChilds(compEle) {
    let children = compEle.props.children;

    if (!children || _.isString(children)) {
      return false;
    }

    if (!Array.isArray(children)) {
      children = [children];
    }

    for (let index = 0; index < children.length; index++) {
      const element = children[index];

      if (element.type.prototype instanceof EditConnect) {
        return true;
      }

      const hasEditable = hasEditableChilds(element);

      if (hasEditable) {
        return hasEditable;
      }
    }

    return false;
  }

  class EditConnect extends React.Component {
    constructor(props) {
      super(props);
      this._root = React.createRef();
      this.id = nextId();
      const hasEditableChildren = hasEditableChilds(this);
      startPushNode({
        id: this.id,
        hasEditableChildren: hasEditableChildren
      });
    }

    componentWillUnmount() {}

    componentDidMount() {
      const dom = ReactDOM.findDOMNode(this._root.current); //eslint-disable-line

      endPushNode({
        id: this.id,
        domNode: dom
      });
    }

    render() {
      return <WrapConponent {...this.props} ref={this._root} />;
    }

  }

  return EditConnect;
};

export default editable()(FlexContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2NsaWVudC9jb21tb24vY29tcG9uZW50cy9GbGV4Q29udGFpbmVyL2VkaXQvaW5kZXguanMiXSwibmFtZXMiOlsiUmVhY3QiLCJSZWFjdERPTSIsIl8iLCJuZXh0SWQiLCJzdGFydFB1c2hOb2RlIiwiZW5kUHVzaE5vZGUiLCJGbGV4Q29udGFpbmVyIiwiZWRpdGFibGUiLCJvcHRpb25zIiwiV3JhcENvbnBvbmVudCIsIm5leHRpZCIsImhhc0VkaXRhYmxlQ2hpbGRzIiwiY29tcEVsZSIsImNoaWxkcmVuIiwicHJvcHMiLCJpc1N0cmluZyIsIkFycmF5IiwiaXNBcnJheSIsImluZGV4IiwibGVuZ3RoIiwiZWxlbWVudCIsInR5cGUiLCJwcm90b3R5cGUiLCJFZGl0Q29ubmVjdCIsImhhc0VkaXRhYmxlIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJfcm9vdCIsImNyZWF0ZVJlZiIsImlkIiwiaGFzRWRpdGFibGVDaGlsZHJlbiIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJkb20iLCJmaW5kRE9NTm9kZSIsImN1cnJlbnQiLCJkb21Ob2RlIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxLQUFQLE1BQWtCLE9BQWxCO0FBQ0EsT0FBT0MsUUFBUCxNQUFxQixXQUFyQjtBQUNBLE9BQU9DLENBQVAsTUFBYyxRQUFkO0FBQ0EsU0FBU0MsTUFBVCxFQUFpQkMsYUFBakIsRUFBZ0NDLFdBQWhDLFFBQW1ELHlCQUFuRDtBQUNBLE9BQU9DLGFBQVAsTUFBMEIsSUFBMUI7O0FBRUEsTUFBTUMsUUFBUSxHQUFHQyxPQUFPLElBQUlDLGFBQWEsSUFBSTtBQUMzQyxNQUFJQyxNQUFNLEdBQUcsQ0FBYjtBQUNBOzs7O0FBR0EsV0FBU0MsaUJBQVQsQ0FBMkJDLE9BQTNCLEVBQW9DO0FBQ2xDLFFBQUlDLFFBQVEsR0FBR0QsT0FBTyxDQUFDRSxLQUFSLENBQWNELFFBQTdCOztBQUNBLFFBQUksQ0FBQ0EsUUFBRCxJQUFhWCxDQUFDLENBQUNhLFFBQUYsQ0FBV0YsUUFBWCxDQUFqQixFQUF1QztBQUNyQyxhQUFPLEtBQVA7QUFDRDs7QUFDRCxRQUFJLENBQUNHLEtBQUssQ0FBQ0MsT0FBTixDQUFjSixRQUFkLENBQUwsRUFBOEI7QUFDNUJBLE1BQUFBLFFBQVEsR0FBRyxDQUFDQSxRQUFELENBQVg7QUFDRDs7QUFDRCxTQUFLLElBQUlLLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHTCxRQUFRLENBQUNNLE1BQXJDLEVBQTZDRCxLQUFLLEVBQWxELEVBQXNEO0FBQ3BELFlBQU1FLE9BQU8sR0FBR1AsUUFBUSxDQUFDSyxLQUFELENBQXhCOztBQUNBLFVBQUlFLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxTQUFiLFlBQWtDQyxXQUF0QyxFQUFtRDtBQUNqRCxlQUFPLElBQVA7QUFDRDs7QUFDRCxZQUFNQyxXQUFXLEdBQUdiLGlCQUFpQixDQUFDUyxPQUFELENBQXJDOztBQUNBLFVBQUlJLFdBQUosRUFBaUI7QUFDZixlQUFPQSxXQUFQO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPLEtBQVA7QUFDRDs7QUFFRCxRQUFNRCxXQUFOLFNBQTBCdkIsS0FBSyxDQUFDeUIsU0FBaEMsQ0FBMEM7QUFDeENDLElBQUFBLFdBQVcsQ0FBQ1osS0FBRCxFQUFRO0FBQ2pCLFlBQU1BLEtBQU47QUFDQSxXQUFLYSxLQUFMLEdBQWEzQixLQUFLLENBQUM0QixTQUFOLEVBQWI7QUFDQSxXQUFLQyxFQUFMLEdBQVUxQixNQUFNLEVBQWhCO0FBQ0EsWUFBTTJCLG1CQUFtQixHQUFHbkIsaUJBQWlCLENBQUMsSUFBRCxDQUE3QztBQUNBUCxNQUFBQSxhQUFhLENBQUM7QUFBRXlCLFFBQUFBLEVBQUUsRUFBRSxLQUFLQSxFQUFYO0FBQWVDLFFBQUFBLG1CQUFtQixFQUFFQTtBQUFwQyxPQUFELENBQWI7QUFDRDs7QUFFREMsSUFBQUEsb0JBQW9CLEdBQUcsQ0FBRTs7QUFFekJDLElBQUFBLGlCQUFpQixHQUFHO0FBQ2xCLFlBQU1DLEdBQUcsR0FBR2hDLFFBQVEsQ0FBQ2lDLFdBQVQsQ0FBcUIsS0FBS1AsS0FBTCxDQUFXUSxPQUFoQyxDQUFaLENBRGtCLENBQ29DOztBQUN0RDlCLE1BQUFBLFdBQVcsQ0FBQztBQUFFd0IsUUFBQUEsRUFBRSxFQUFFLEtBQUtBLEVBQVg7QUFBZU8sUUFBQUEsT0FBTyxFQUFFSDtBQUF4QixPQUFELENBQVg7QUFDRDs7QUFFREksSUFBQUEsTUFBTSxHQUFHO0FBQ1AsYUFBTyxDQUFDLGFBQUQsQ0FBZSxJQUFJLEtBQUt2QixLQUFULENBQWYsQ0FBK0IsSUFBSSxDQUFDLEtBQUthLEtBQU4sQ0FBbkMsR0FBUDtBQUNEOztBQWxCdUM7O0FBb0IxQyxTQUFPSixXQUFQO0FBQ0QsQ0EvQ0Q7O0FBaURBLGVBQWVoQixRQUFRLEdBQUdELGFBQUgsQ0FBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgbmV4dElkLCBzdGFydFB1c2hOb2RlLCBlbmRQdXNoTm9kZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2VkaXRhYmxlJztcbmltcG9ydCBGbGV4Q29udGFpbmVyIGZyb20gJy4uJztcblxuY29uc3QgZWRpdGFibGUgPSBvcHRpb25zID0+IFdyYXBDb25wb25lbnQgPT4ge1xuICBsZXQgbmV4dGlkID0gMDtcbiAgLyoqXG4gICAqIOWIpOaWreW9k+WJjee7hOS7tuaYr+WQpuacieWPr+e8lui+keiKgueCuVxuICAgKi9cbiAgZnVuY3Rpb24gaGFzRWRpdGFibGVDaGlsZHMoY29tcEVsZSkge1xuICAgIGxldCBjaGlsZHJlbiA9IGNvbXBFbGUucHJvcHMuY2hpbGRyZW47XG4gICAgaWYgKCFjaGlsZHJlbiB8fCBfLmlzU3RyaW5nKGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgfVxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjaGlsZHJlbi5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBjaGlsZHJlbltpbmRleF07XG4gICAgICBpZiAoZWxlbWVudC50eXBlLnByb3RvdHlwZSBpbnN0YW5jZW9mIEVkaXRDb25uZWN0KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgaGFzRWRpdGFibGUgPSBoYXNFZGl0YWJsZUNoaWxkcyhlbGVtZW50KTtcbiAgICAgIGlmIChoYXNFZGl0YWJsZSkge1xuICAgICAgICByZXR1cm4gaGFzRWRpdGFibGU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNsYXNzIEVkaXRDb25uZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgdGhpcy5fcm9vdCA9IFJlYWN0LmNyZWF0ZVJlZigpO1xuICAgICAgdGhpcy5pZCA9IG5leHRJZCgpO1xuICAgICAgY29uc3QgaGFzRWRpdGFibGVDaGlsZHJlbiA9IGhhc0VkaXRhYmxlQ2hpbGRzKHRoaXMpO1xuICAgICAgc3RhcnRQdXNoTm9kZSh7IGlkOiB0aGlzLmlkLCBoYXNFZGl0YWJsZUNoaWxkcmVuOiBoYXNFZGl0YWJsZUNoaWxkcmVuIH0pO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge31cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgY29uc3QgZG9tID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcy5fcm9vdC5jdXJyZW50KTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBlbmRQdXNoTm9kZSh7IGlkOiB0aGlzLmlkLCBkb21Ob2RlOiBkb20gfSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIDxXcmFwQ29ucG9uZW50IHsuLi50aGlzLnByb3BzfSByZWY9e3RoaXMuX3Jvb3R9IC8+O1xuICAgIH1cbiAgfVxuICByZXR1cm4gRWRpdENvbm5lY3Q7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBlZGl0YWJsZSgpKEZsZXhDb250YWluZXIpO1xuIl19
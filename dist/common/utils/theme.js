import memoizeOne from 'memoize-one';
import Color from 'color';
const colorMethods = ['negate', // rgb(0, 100, 255) -> rgb(255, 155, 0)
'lighten', // hsl(100, 50%, 50%) -> hsl(100, 50%, 75%)
'darken', // hsl(100, 50%, 50%) -> hsl(100, 50%, 25%)
'saturate', // hsl(100, 50%, 50%) -> hsl(100, 75%, 50%)
'desaturate', // hsl(100, 50%, 50%) -> hsl(100, 25%, 50%)
'greyscale', // #5CBF54 -> #969696
'whiten', // hwb(100, 50%, 50%) -> hwb(100, 75%, 50%)
'blacken', // hwb(100, 50%, 50%) -> hwb(100, 50%, 75%)
'clearer', // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 0.4)
'opaquer', // rgba(10, 10, 10, 0.8) -> rgba(10, 10, 10, 1.0)
'rotate'];
/**
 * Takes a selector that returns a color string and returns new decorated selector that calls the
 * original function to get the color and then modifies that color, ultimately returning another
 * color string.
 */

const addModifier = (fn, method, ...modifierArgs) => (...args) => new Color(fn(...args))[method](...modifierArgs).rgbString();
/**
 * Add useful methods directly to selector function, as well as put an rgbString() call at the end
 * @param selector
 */


export const decorateSelector = selector => {
  // add member functions to our selector
  colorMethods.forEach(method => {
    selector[method] = memoizeOne((...args) => decorateSelector(addModifier(selector, method, ...args)));
  });
  return selector;
};

const createTheme = colors => Object.keys(colors).map(c => ({
  key: c,
  value: colors[c]
})).map(({
  key,
  value
}) => ({
  key,
  value: decorateSelector(() => value)
})).reduce((prev, {
  key,
  value
}) => ({ ...prev,
  [key]: value
}), {});

const theme = { ...createTheme({
    background: '#24282A',
    background2: '#1C2022',
    background3: '#374140',
    background4: '#141618',
    primary: '#FFD399',
    primaryText: '#7F694C',
    secondary: '#40A9F3',
    shySecondary: '#66b9f4',
    white: '#E0E0E0',
    gray: '#C0C0C0',
    black: '#74757D',
    green: '#5da700',
    redBackground: '#400000',
    red: '#F27777',
    dangerBackground: '#DC3545'
  })
};
export default theme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9jb21tb24vdXRpbHMvdGhlbWUuanMiXSwibmFtZXMiOlsibWVtb2l6ZU9uZSIsIkNvbG9yIiwiY29sb3JNZXRob2RzIiwiYWRkTW9kaWZpZXIiLCJmbiIsIm1ldGhvZCIsIm1vZGlmaWVyQXJncyIsImFyZ3MiLCJyZ2JTdHJpbmciLCJkZWNvcmF0ZVNlbGVjdG9yIiwic2VsZWN0b3IiLCJmb3JFYWNoIiwiY3JlYXRlVGhlbWUiLCJjb2xvcnMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiYyIsImtleSIsInZhbHVlIiwicmVkdWNlIiwicHJldiIsInRoZW1lIiwiYmFja2dyb3VuZCIsImJhY2tncm91bmQyIiwiYmFja2dyb3VuZDMiLCJiYWNrZ3JvdW5kNCIsInByaW1hcnkiLCJwcmltYXJ5VGV4dCIsInNlY29uZGFyeSIsInNoeVNlY29uZGFyeSIsIndoaXRlIiwiZ3JheSIsImJsYWNrIiwiZ3JlZW4iLCJyZWRCYWNrZ3JvdW5kIiwicmVkIiwiZGFuZ2VyQmFja2dyb3VuZCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsVUFBUCxNQUF1QixhQUF2QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFFQSxNQUFNQyxZQUFZLEdBQUcsQ0FDbkIsUUFEbUIsRUFDVDtBQUVWLFNBSG1CLEVBR1I7QUFDWCxRQUptQixFQUlUO0FBRVYsVUFObUIsRUFNUDtBQUNaLFlBUG1CLEVBT0w7QUFDZCxXQVJtQixFQVFOO0FBRWIsUUFWbUIsRUFVVDtBQUNWLFNBWG1CLEVBV1I7QUFFWCxTQWJtQixFQWFSO0FBQ1gsU0FkbUIsRUFjUjtBQUVYLFFBaEJtQixDQUFyQjtBQW1CQTs7Ozs7O0FBS0EsTUFBTUMsV0FBVyxHQUFHLENBQUNDLEVBQUQsRUFBS0MsTUFBTCxFQUFhLEdBQUdDLFlBQWhCLEtBQWlDLENBQUMsR0FBR0MsSUFBSixLQUNuRCxJQUFJTixLQUFKLENBQVVHLEVBQUUsQ0FBQyxHQUFHRyxJQUFKLENBQVosRUFBdUJGLE1BQXZCLEVBQStCLEdBQUdDLFlBQWxDLEVBQWdERSxTQUFoRCxFQURGO0FBRUE7Ozs7OztBQUlBLE9BQU8sTUFBTUMsZ0JBQWdCLEdBQUdDLFFBQVEsSUFBSTtBQUMxQztBQUNBUixFQUFBQSxZQUFZLENBQUNTLE9BQWIsQ0FBcUJOLE1BQU0sSUFBSTtBQUM3QkssSUFBQUEsUUFBUSxDQUFDTCxNQUFELENBQVIsR0FBbUJMLFVBQVUsQ0FBQyxDQUFDLEdBQUdPLElBQUosS0FDNUJFLGdCQUFnQixDQUFDTixXQUFXLENBQUNPLFFBQUQsRUFBV0wsTUFBWCxFQUFtQixHQUFHRSxJQUF0QixDQUFaLENBRFcsQ0FBN0I7QUFHRCxHQUpEO0FBS0EsU0FBT0csUUFBUDtBQUNELENBUk07O0FBVVAsTUFBTUUsV0FBVyxHQUFHQyxNQUFNLElBQ3hCQyxNQUFNLENBQUNDLElBQVAsQ0FBWUYsTUFBWixFQUNHRyxHQURILENBQ09DLENBQUMsS0FBSztBQUFFQyxFQUFBQSxHQUFHLEVBQUVELENBQVA7QUFBVUUsRUFBQUEsS0FBSyxFQUFFTixNQUFNLENBQUNJLENBQUQ7QUFBdkIsQ0FBTCxDQURSLEVBRUdELEdBRkgsQ0FFTyxDQUFDO0FBQUVFLEVBQUFBLEdBQUY7QUFBT0MsRUFBQUE7QUFBUCxDQUFELE1BQXFCO0FBQUVELEVBQUFBLEdBQUY7QUFBT0MsRUFBQUEsS0FBSyxFQUFFVixnQkFBZ0IsQ0FBQyxNQUFNVSxLQUFQO0FBQTlCLENBQXJCLENBRlAsRUFHR0MsTUFISCxDQUdVLENBQUNDLElBQUQsRUFBTztBQUFFSCxFQUFBQSxHQUFGO0FBQU9DLEVBQUFBO0FBQVAsQ0FBUCxNQUEyQixFQUFFLEdBQUdFLElBQUw7QUFBVyxHQUFDSCxHQUFELEdBQU9DO0FBQWxCLENBQTNCLENBSFYsRUFHaUUsRUFIakUsQ0FERjs7QUFNQSxNQUFNRyxLQUFLLEdBQUcsRUFDWixHQUFHVixXQUFXLENBQUM7QUFDYlcsSUFBQUEsVUFBVSxFQUFFLFNBREM7QUFFYkMsSUFBQUEsV0FBVyxFQUFFLFNBRkE7QUFHYkMsSUFBQUEsV0FBVyxFQUFFLFNBSEE7QUFJYkMsSUFBQUEsV0FBVyxFQUFFLFNBSkE7QUFLYkMsSUFBQUEsT0FBTyxFQUFFLFNBTEk7QUFNYkMsSUFBQUEsV0FBVyxFQUFFLFNBTkE7QUFPYkMsSUFBQUEsU0FBUyxFQUFFLFNBUEU7QUFRYkMsSUFBQUEsWUFBWSxFQUFFLFNBUkQ7QUFTYkMsSUFBQUEsS0FBSyxFQUFFLFNBVE07QUFVYkMsSUFBQUEsSUFBSSxFQUFFLFNBVk87QUFXYkMsSUFBQUEsS0FBSyxFQUFFLFNBWE07QUFZYkMsSUFBQUEsS0FBSyxFQUFFLFNBWk07QUFhYkMsSUFBQUEsYUFBYSxFQUFFLFNBYkY7QUFjYkMsSUFBQUEsR0FBRyxFQUFFLFNBZFE7QUFlYkMsSUFBQUEsZ0JBQWdCLEVBQUU7QUFmTCxHQUFEO0FBREYsQ0FBZDtBQW9CQSxlQUFlZixLQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1lbW9pemVPbmUgZnJvbSAnbWVtb2l6ZS1vbmUnO1xuaW1wb3J0IENvbG9yIGZyb20gJ2NvbG9yJztcblxuY29uc3QgY29sb3JNZXRob2RzID0gW1xuICAnbmVnYXRlJywgLy8gcmdiKDAsIDEwMCwgMjU1KSAtPiByZ2IoMjU1LCAxNTUsIDApXG5cbiAgJ2xpZ2h0ZW4nLCAvLyBoc2woMTAwLCA1MCUsIDUwJSkgLT4gaHNsKDEwMCwgNTAlLCA3NSUpXG4gICdkYXJrZW4nLCAvLyBoc2woMTAwLCA1MCUsIDUwJSkgLT4gaHNsKDEwMCwgNTAlLCAyNSUpXG5cbiAgJ3NhdHVyYXRlJywgLy8gaHNsKDEwMCwgNTAlLCA1MCUpIC0+IGhzbCgxMDAsIDc1JSwgNTAlKVxuICAnZGVzYXR1cmF0ZScsIC8vIGhzbCgxMDAsIDUwJSwgNTAlKSAtPiBoc2woMTAwLCAyNSUsIDUwJSlcbiAgJ2dyZXlzY2FsZScsIC8vICM1Q0JGNTQgLT4gIzk2OTY5NlxuXG4gICd3aGl0ZW4nLCAvLyBod2IoMTAwLCA1MCUsIDUwJSkgLT4gaHdiKDEwMCwgNzUlLCA1MCUpXG4gICdibGFja2VuJywgLy8gaHdiKDEwMCwgNTAlLCA1MCUpIC0+IGh3YigxMDAsIDUwJSwgNzUlKVxuXG4gICdjbGVhcmVyJywgLy8gcmdiYSgxMCwgMTAsIDEwLCAwLjgpIC0+IHJnYmEoMTAsIDEwLCAxMCwgMC40KVxuICAnb3BhcXVlcicsIC8vIHJnYmEoMTAsIDEwLCAxMCwgMC44KSAtPiByZ2JhKDEwLCAxMCwgMTAsIDEuMClcblxuICAncm90YXRlJywgLy8gaHNsKDYwLCAyMCUsIDIwJSkgLT4gaHNsKDMzMCwgMjAlLCAyMCUpXG5dO1xuXG4vKipcbiAqIFRha2VzIGEgc2VsZWN0b3IgdGhhdCByZXR1cm5zIGEgY29sb3Igc3RyaW5nIGFuZCByZXR1cm5zIG5ldyBkZWNvcmF0ZWQgc2VsZWN0b3IgdGhhdCBjYWxscyB0aGVcbiAqIG9yaWdpbmFsIGZ1bmN0aW9uIHRvIGdldCB0aGUgY29sb3IgYW5kIHRoZW4gbW9kaWZpZXMgdGhhdCBjb2xvciwgdWx0aW1hdGVseSByZXR1cm5pbmcgYW5vdGhlclxuICogY29sb3Igc3RyaW5nLlxuICovXG5jb25zdCBhZGRNb2RpZmllciA9IChmbiwgbWV0aG9kLCAuLi5tb2RpZmllckFyZ3MpID0+ICguLi5hcmdzKSA9PlxuICBuZXcgQ29sb3IoZm4oLi4uYXJncykpW21ldGhvZF0oLi4ubW9kaWZpZXJBcmdzKS5yZ2JTdHJpbmcoKTtcbi8qKlxuICogQWRkIHVzZWZ1bCBtZXRob2RzIGRpcmVjdGx5IHRvIHNlbGVjdG9yIGZ1bmN0aW9uLCBhcyB3ZWxsIGFzIHB1dCBhbiByZ2JTdHJpbmcoKSBjYWxsIGF0IHRoZSBlbmRcbiAqIEBwYXJhbSBzZWxlY3RvclxuICovXG5leHBvcnQgY29uc3QgZGVjb3JhdGVTZWxlY3RvciA9IHNlbGVjdG9yID0+IHtcbiAgLy8gYWRkIG1lbWJlciBmdW5jdGlvbnMgdG8gb3VyIHNlbGVjdG9yXG4gIGNvbG9yTWV0aG9kcy5mb3JFYWNoKG1ldGhvZCA9PiB7XG4gICAgc2VsZWN0b3JbbWV0aG9kXSA9IG1lbW9pemVPbmUoKC4uLmFyZ3MpID0+XG4gICAgICBkZWNvcmF0ZVNlbGVjdG9yKGFkZE1vZGlmaWVyKHNlbGVjdG9yLCBtZXRob2QsIC4uLmFyZ3MpKVxuICAgICk7XG4gIH0pO1xuICByZXR1cm4gc2VsZWN0b3I7XG59O1xuXG5jb25zdCBjcmVhdGVUaGVtZSA9IGNvbG9ycyA9PlxuICBPYmplY3Qua2V5cyhjb2xvcnMpXG4gICAgLm1hcChjID0+ICh7IGtleTogYywgdmFsdWU6IGNvbG9yc1tjXSB9KSlcbiAgICAubWFwKCh7IGtleSwgdmFsdWUgfSkgPT4gKHsga2V5LCB2YWx1ZTogZGVjb3JhdGVTZWxlY3RvcigoKSA9PiB2YWx1ZSkgfSkpXG4gICAgLnJlZHVjZSgocHJldiwgeyBrZXksIHZhbHVlIH0pID0+ICh7IC4uLnByZXYsIFtrZXldOiB2YWx1ZSB9KSwge30pO1xuXG5jb25zdCB0aGVtZSA9IHtcbiAgLi4uY3JlYXRlVGhlbWUoe1xuICAgIGJhY2tncm91bmQ6ICcjMjQyODJBJyxcbiAgICBiYWNrZ3JvdW5kMjogJyMxQzIwMjInLFxuICAgIGJhY2tncm91bmQzOiAnIzM3NDE0MCcsXG4gICAgYmFja2dyb3VuZDQ6ICcjMTQxNjE4JyxcbiAgICBwcmltYXJ5OiAnI0ZGRDM5OScsXG4gICAgcHJpbWFyeVRleHQ6ICcjN0Y2OTRDJyxcbiAgICBzZWNvbmRhcnk6ICcjNDBBOUYzJyxcbiAgICBzaHlTZWNvbmRhcnk6ICcjNjZiOWY0JyxcbiAgICB3aGl0ZTogJyNFMEUwRTAnLFxuICAgIGdyYXk6ICcjQzBDMEMwJyxcbiAgICBibGFjazogJyM3NDc1N0QnLFxuICAgIGdyZWVuOiAnIzVkYTcwMCcsXG4gICAgcmVkQmFja2dyb3VuZDogJyM0MDAwMDAnLFxuICAgIHJlZDogJyNGMjc3NzcnLFxuICAgIGRhbmdlckJhY2tncm91bmQ6ICcjREMzNTQ1JyxcbiAgfSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCB0aGVtZTtcbiJdfQ==
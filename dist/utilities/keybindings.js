const isIOS = typeof navigator !== 'undefined' && !!navigator.platform.match(/(iPhone|iPod|iPad)/i);
const isMac = typeof navigator !== 'undefined' && (isIOS || !!navigator.platform.match(/Mac/i));
const metaKey = isMac ? isIOS ? 'Alt' : 'Meta' : 'Alt';
const metaOrCtrlKey = isMac ? isIOS ? 'Alt' : 'Meta' : 'Control';
const ctrlOrAltKey = isIOS ? 'Alt' : 'Control'; // String.fromCharCode receives UTF-16 code units, but the keyCode represents the actual
// "physical" key on the keyboard. For this reason it's sketchy (some do match) to
// String.fromCharCode(e.keyCode) so we have this table with the correct mapping.
// KeyCode is a weird spec (it is a key event api after all) but it's defined in a way that
// it's i18n safe: In the US keyboard "," and "<" are on the same physical key so they
// both have keyCode 188. One might expect this will break in non-US keyboards since
// these characters are in different physical keys, however, the spec is defined in a way
// that no matter which physical key the "," and the "<" are in, they'll always be keyCode 188.
// http://www.javascripter.net/faq/keycodes.htm

const keyCodeMapping = {
  '188': ','
};
export function normalizeKey(e) {
  if (e.key) {
    if (e.key.split('').length === 1) {
      let key;

      if (Object.prototype.hasOwnProperty.call(keyCodeMapping, e.keyCode)) {
        key = keyCodeMapping[e.keyCode];
      } else {
        key = String.fromCharCode(e.keyCode).toUpperCase();
      }

      if (key === ' ') {
        return 'Space';
      }

      return key;
    }

    return e.key;
  }

  return undefined;
}
export function formatKey(key) {
  switch (key) {
    case 'Meta':
      {
        if (isMac) {
          return '⌘';
        }

        return 'Win';
      }

    case 'Control':
      return 'Ctrl';

    case ' ':
      return 'Space';

    case 'Shift':
      return '⇧';

    default:
      if (key.split('').length === 1) {
        return key.toUpperCase();
      }

      return key;
  }
}
export const KEYBINDINGS = {
  'editor.open-quick-actions': {
    title: 'Open Quick Actions',
    type: 'View',
    bindings: [[metaOrCtrlKey, 'Shift', 'P']],
    signal: 'editor.quickActionsOpened'
  },
  workspace: {
    title: 'Toggle Sidebar',
    type: 'View',
    bindings: [],
    signal: 'workspace.toggleCurrentWorkspaceItem'
  },
  'editor.close-tab': {
    title: 'Close Current Tab',
    type: 'View',
    bindings: [[ctrlOrAltKey, 'W']],
    signal: 'editor.tabClosed',
    payload: state => ({
      tabIndex: state.editor.tabs.filter(x => x).findIndex(t => t.moduleId === state.currentModuleId)
    })
  },
  'editor.zen-mode': {
    title: 'Toggle Zen Mode',
    type: 'View',
    bindings: [[metaKey, 'K', 'Z']],
    signal: 'preferences.settingChanged',
    payload: state => ({
      name: 'zenMode',
      value: !state.preferences.settings.zenMode
    })
  },
  'editor.toggle-console': {
    title: 'Toggle Dev Tools',
    type: 'View',
    bindings: [[metaKey, 'K', 'D']],
    signal: 'preferences.devtoolsToggled'
  },
  'editor.open-preferences': {
    title: 'Open Preferences',
    type: 'View',
    bindings: [[metaOrCtrlKey, ',']],
    signal: 'modalOpened',
    payload: {
      modal: 'preferences'
    }
  },
  'source.dependencies.open': {
    title: 'Add Dependency',
    type: 'Source',
    bindings: [],
    signal: 'modalOpened',
    payload: {
      modal: 'searchDependencies'
    }
  },
  'source.modules.prettify': {
    title: 'Prettify Current File',
    type: 'Source',
    bindings: [],
    signal: 'editor.prettifyClicked',
    payload: state => ({
      moduleShortid: state.editor.currentModule.shortid
    })
  },
  'source.modules.save': {
    title: 'Save Current File',
    type: 'Source',
    bindings: [[metaOrCtrlKey, 'S']],
    signal: 'editor.codeSaved',
    payload: state => ({
      moduleShortid: state.editor.currentModule.shortid
    })
  },
  'source.modules.save-all': {
    title: 'Save All Modified Files',
    type: 'Source',
    bindings: [[metaOrCtrlKey, 'Shift', 'S']],
    signal: 'editor.saveClicked'
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC91dGlsaXRpZXMva2V5YmluZGluZ3MuanMiXSwibmFtZXMiOlsiaXNJT1MiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsIm1hdGNoIiwiaXNNYWMiLCJtZXRhS2V5IiwibWV0YU9yQ3RybEtleSIsImN0cmxPckFsdEtleSIsImtleUNvZGVNYXBwaW5nIiwibm9ybWFsaXplS2V5IiwiZSIsImtleSIsInNwbGl0IiwibGVuZ3RoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwia2V5Q29kZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvVXBwZXJDYXNlIiwidW5kZWZpbmVkIiwiZm9ybWF0S2V5IiwiS0VZQklORElOR1MiLCJ0aXRsZSIsInR5cGUiLCJiaW5kaW5ncyIsInNpZ25hbCIsIndvcmtzcGFjZSIsInBheWxvYWQiLCJzdGF0ZSIsInRhYkluZGV4IiwiZWRpdG9yIiwidGFicyIsImZpbHRlciIsIngiLCJmaW5kSW5kZXgiLCJ0IiwibW9kdWxlSWQiLCJjdXJyZW50TW9kdWxlSWQiLCJuYW1lIiwidmFsdWUiLCJwcmVmZXJlbmNlcyIsInNldHRpbmdzIiwiemVuTW9kZSIsIm1vZGFsIiwibW9kdWxlU2hvcnRpZCIsImN1cnJlbnRNb2R1bGUiLCJzaG9ydGlkIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQ1QsT0FBT0MsU0FBUCxLQUFxQixXQUFyQixJQUNBLENBQUMsQ0FBQ0EsU0FBUyxDQUFDQyxRQUFWLENBQW1CQyxLQUFuQixDQUF5QixxQkFBekIsQ0FGSjtBQUdBLE1BQU1DLEtBQUssR0FDVCxPQUFPSCxTQUFQLEtBQXFCLFdBQXJCLEtBQ0NELEtBQUssSUFBSSxDQUFDLENBQUNDLFNBQVMsQ0FBQ0MsUUFBVixDQUFtQkMsS0FBbkIsQ0FBeUIsTUFBekIsQ0FEWixDQURGO0FBR0EsTUFBTUUsT0FBTyxHQUFHRCxLQUFLLEdBQUlKLEtBQUssR0FBRyxLQUFILEdBQVcsTUFB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QkMsSUFBQUEsTUFBTSxFQUFFLGFBSmtCO0FBSzFCRSxJQUFBQSxPQUFPLEVBQUU7QUFDUGdCLE1BQUFBLEtBQUssRUFBRTtBQURBO0FBTGlCLEdBdkRIO0FBaUV6Qiw2QkFBMkI7QUFDekJyQixJQUFBQSxLQUFLLEVBQUUsdUJBRGtCO0FBRXpCQyxJQUFBQSxJQUFJLEVBQUUsUUFGbUI7QUFHekJDLElBQUFBLFFBQVEsRUFBRSxFQUhlO0FBSXpCQyxJQUFBQSxNQUFNLEVBQUUsd0JBSmlCO0FBS3pCRSxJQUFBQSxPQUFPLEVBQUVDLEtBQUssS0FBSztBQUNqQmdCLE1BQUFBLGFBQWEsRUFBRWhCLEtBQUssQ0FBQ0UsTUFBTixDQUFhZSxhQUFiLENBQTJCQztBQUR6QixLQUFMO0FBTFcsR0FqRUY7QUEyRXpCLHlCQUF1QjtBQUNyQnhCLElBQUFBLEtBQUssRUFBRSxtQkFEYztBQUVyQkMsSUFBQUEsSUFBSSxFQUFFLFFBRmU7QUFHckJDLElBQUFBLFFBQVEsRUFBRSxDQUFDLENBQUNyQixhQUFELEVBQWdCLEdBQWhCLENBQUQsQ0FIVztBQUlyQnNCLElBQUFBLE1BQU0sRUFBRSxrQkFKYTtBQUtyQkUsSUFBQUEsT0FBTyxFQUFFQyxLQUFLLEtBQUs7QUFDakJnQixNQUFBQSxhQUFhLEVBQUVoQixLQUFLLENBQUNFLE1BQU4sQ0FBYWUsYUFBYixDQUEyQkM7QUFEekIsS0FBTDtBQUxPLEdBM0VFO0FBcUZ6Qiw2QkFBMkI7QUFDekJ4QixJQUFBQSxLQUFLLEVBQUUseUJBRGtCO0FBRXpCQyxJQUFBQSxJQUFJLEVBQUUsUUFGbUI7QUFHekJDLElBQUFBLFFBQVEsRUFBRSxDQUFDLENBQUNyQixhQUFELEVBQWdCLE9BQWhCLEVBQXlCLEdBQXpCLENBQUQsQ0FIZTtBQUl6QnNCLElBQUFBLE1BQU0sRUFBRTtBQUppQjtBQXJGRixDQUFwQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGlzSU9TID1cbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgISFuYXZpZ2F0b3IucGxhdGZvcm0ubWF0Y2goLyhpUGhvbmV8aVBvZHxpUGFkKS9pKTtcbmNvbnN0IGlzTWFjID1cbiAgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgKGlzSU9TIHx8ICEhbmF2aWdhdG9yLnBsYXRmb3JtLm1hdGNoKC9NYWMvaSkpO1xuY29uc3QgbWV0YUtleSA9IGlzTWFjID8gKGlzSU9TID8gJ0FsdCcgOiAnTWV0YScpIDogJ0FsdCc7XG5jb25zdCBtZXRhT3JDdHJsS2V5ID0gaXNNYWMgPyAoaXNJT1MgPyAnQWx0JyA6ICdNZXRhJykgOiAnQ29udHJvbCc7XG5jb25zdCBjdHJsT3JBbHRLZXkgPSBpc0lPUyA/ICdBbHQnIDogJ0NvbnRyb2wnO1xuXG4vLyBTdHJpbmcuZnJvbUNoYXJDb2RlIHJlY2VpdmVzIFVURi0xNiBjb2RlIHVuaXRzLCBidXQgdGhlIGtleUNvZGUgcmVwcmVzZW50cyB0aGUgYWN0dWFsXG4vLyBcInBoeXNpY2FsXCIga2V5IG9uIHRoZSBrZXlib2FyZC4gRm9yIHRoaXMgcmVhc29uIGl0J3Mgc2tldGNoeSAoc29tZSBkbyBtYXRjaCkgdG9cbi8vIFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKSBzbyB3ZSBoYXZlIHRoaXMgdGFibGUgd2l0aCB0aGUgY29ycmVjdCBtYXBwaW5nLlxuLy8gS2V5Q29kZSBpcyBhIHdlaXJkIHNwZWMgKGl0IGlzIGEga2V5IGV2ZW50IGFwaSBhZnRlciBhbGwpIGJ1dCBpdCdzIGRlZmluZWQgaW4gYSB3YXkgdGhhdFxuLy8gaXQncyBpMThuIHNhZmU6IEluIHRoZSBVUyBrZXlib2FyZCBcIixcIiBhbmQgXCI8XCIgYXJlIG9uIHRoZSBzYW1lIHBoeXNpY2FsIGtleSBzbyB0aGV5XG4vLyBib3RoIGhhdmUga2V5Q29kZSAxODguIE9uZSBtaWdodCBleHBlY3QgdGhpcyB3aWxsIGJyZWFrIGluIG5vbi1VUyBrZXlib2FyZHMgc2luY2Vcbi8vIHRoZXNlIGNoYXJhY3RlcnMgYXJlIGluIGRpZmZlcmVudCBwaHlzaWNhbCBrZXlzLCBob3dldmVyLCB0aGUgc3BlYyBpcyBkZWZpbmVkIGluIGEgd2F5XG4vLyB0aGF0IG5vIG1hdHRlciB3aGljaCBwaHlzaWNhbCBrZXkgdGhlIFwiLFwiIGFuZCB0aGUgXCI8XCIgYXJlIGluLCB0aGV5J2xsIGFsd2F5cyBiZSBrZXlDb2RlIDE4OC5cbi8vIGh0dHA6Ly93d3cuamF2YXNjcmlwdGVyLm5ldC9mYXEva2V5Y29kZXMuaHRtXG5jb25zdCBrZXlDb2RlTWFwcGluZyA9IHtcbiAgJzE4OCc6ICcsJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVLZXkoZSkge1xuICBpZiAoZS5rZXkpIHtcbiAgICBpZiAoZS5rZXkuc3BsaXQoJycpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgbGV0IGtleTtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoa2V5Q29kZU1hcHBpbmcsIGUua2V5Q29kZSkpIHtcbiAgICAgICAga2V5ID0ga2V5Q29kZU1hcHBpbmdbZS5rZXlDb2RlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJyAnKSB7XG4gICAgICAgIHJldHVybiAnU3BhY2UnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG5cbiAgICByZXR1cm4gZS5rZXk7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0S2V5KGtleSkge1xuICBzd2l0Y2ggKGtleSkge1xuICAgIGNhc2UgJ01ldGEnOiB7XG4gICAgICBpZiAoaXNNYWMpIHtcbiAgICAgICAgcmV0dXJuICfijJgnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICdXaW4nO1xuICAgIH1cbiAgICBjYXNlICdDb250cm9sJzpcbiAgICAgIHJldHVybiAnQ3RybCc7XG4gICAgY2FzZSAnICc6XG4gICAgICByZXR1cm4gJ1NwYWNlJztcbiAgICBjYXNlICdTaGlmdCc6XG4gICAgICByZXR1cm4gJ+KHpyc7XG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChrZXkuc3BsaXQoJycpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4ga2V5LnRvVXBwZXJDYXNlKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4ga2V5O1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBLRVlCSU5ESU5HUyA9IHtcbiAgJ2VkaXRvci5vcGVuLXF1aWNrLWFjdGlvbnMnOiB7XG4gICAgdGl0bGU6ICdPcGVuIFF1aWNrIEFjdGlvbnMnLFxuICAgIHR5cGU6ICdWaWV3JyxcbiAgICBiaW5kaW5nczogW1ttZXRhT3JDdHJsS2V5LCAnU2hpZnQnLCAnUCddXSxcbiAgICBzaWduYWw6ICdlZGl0b3IucXVpY2tBY3Rpb25zT3BlbmVkJyxcbiAgfSxcblxuICB3b3Jrc3BhY2U6IHtcbiAgICB0aXRsZTogJ1RvZ2dsZSBTaWRlYmFyJyxcbiAgICB0eXBlOiAnVmlldycsXG4gICAgYmluZGluZ3M6IFtdLFxuICAgIHNpZ25hbDogJ3dvcmtzcGFjZS50b2dnbGVDdXJyZW50V29ya3NwYWNlSXRlbScsXG4gIH0sXG5cbiAgJ2VkaXRvci5jbG9zZS10YWInOiB7XG4gICAgdGl0bGU6ICdDbG9zZSBDdXJyZW50IFRhYicsXG4gICAgdHlwZTogJ1ZpZXcnLFxuICAgIGJpbmRpbmdzOiBbW2N0cmxPckFsdEtleSwgJ1cnXV0sXG4gICAgc2lnbmFsOiAnZWRpdG9yLnRhYkNsb3NlZCcsXG4gICAgcGF5bG9hZDogc3RhdGUgPT4gKHtcbiAgICAgIHRhYkluZGV4OiBzdGF0ZS5lZGl0b3IudGFic1xuICAgICAgICAuZmlsdGVyKHggPT4geClcbiAgICAgICAgLmZpbmRJbmRleCh0ID0+IHQubW9kdWxlSWQgPT09IHN0YXRlLmN1cnJlbnRNb2R1bGVJZCksXG4gICAgfSksXG4gIH0sXG5cbiAgJ2VkaXRvci56ZW4tbW9kZSc6IHtcbiAgICB0aXRsZTogJ1RvZ2dsZSBaZW4gTW9kZScsXG4gICAgdHlwZTogJ1ZpZXcnLFxuICAgIGJpbmRpbmdzOiBbW21ldGFLZXksICdLJywgJ1onXV0sXG4gICAgc2lnbmFsOiAncHJlZmVyZW5jZXMuc2V0dGluZ0NoYW5nZWQnLFxuICAgIHBheWxvYWQ6IHN0YXRlID0+ICh7XG4gICAgICBuYW1lOiAnemVuTW9kZScsXG4gICAgICB2YWx1ZTogIXN0YXRlLnByZWZlcmVuY2VzLnNldHRpbmdzLnplbk1vZGUsXG4gICAgfSksXG4gIH0sXG5cbiAgJ2VkaXRvci50b2dnbGUtY29uc29sZSc6IHtcbiAgICB0aXRsZTogJ1RvZ2dsZSBEZXYgVG9vbHMnLFxuICAgIHR5cGU6ICdWaWV3JyxcbiAgICBiaW5kaW5nczogW1ttZXRhS2V5LCAnSycsICdEJ11dLFxuICAgIHNpZ25hbDogJ3ByZWZlcmVuY2VzLmRldnRvb2xzVG9nZ2xlZCcsXG4gIH0sXG5cbiAgJ2VkaXRvci5vcGVuLXByZWZlcmVuY2VzJzoge1xuICAgIHRpdGxlOiAnT3BlbiBQcmVmZXJlbmNlcycsXG4gICAgdHlwZTogJ1ZpZXcnLFxuICAgIGJpbmRpbmdzOiBbW21ldGFPckN0cmxLZXksICcsJ11dLFxuICAgIHNpZ25hbDogJ21vZGFsT3BlbmVkJyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBtb2RhbDogJ3ByZWZlcmVuY2VzJyxcbiAgICB9LFxuICB9LFxuXG4gICdzb3VyY2UuZGVwZW5kZW5jaWVzLm9wZW4nOiB7XG4gICAgdGl0bGU6ICdBZGQgRGVwZW5kZW5jeScsXG4gICAgdHlwZTogJ1NvdXJjZScsXG4gICAgYmluZGluZ3M6IFtdLFxuICAgIHNpZ25hbDogJ21vZGFsT3BlbmVkJyxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBtb2RhbDogJ3NlYXJjaERlcGVuZGVuY2llcycsXG4gICAgfSxcbiAgfSxcblxuICAnc291cmNlLm1vZHVsZXMucHJldHRpZnknOiB7XG4gICAgdGl0bGU6ICdQcmV0dGlmeSBDdXJyZW50IEZpbGUnLFxuICAgIHR5cGU6ICdTb3VyY2UnLFxuICAgIGJpbmRpbmdzOiBbXSxcbiAgICBzaWduYWw6ICdlZGl0b3IucHJldHRpZnlDbGlja2VkJyxcbiAgICBwYXlsb2FkOiBzdGF0ZSA9PiAoe1xuICAgICAgbW9kdWxlU2hvcnRpZDogc3RhdGUuZWRpdG9yLmN1cnJlbnRNb2R1bGUuc2hvcnRpZCxcbiAgICB9KSxcbiAgfSxcblxuICAnc291cmNlLm1vZHVsZXMuc2F2ZSc6IHtcbiAgICB0aXRsZTogJ1NhdmUgQ3VycmVudCBGaWxlJyxcbiAgICB0eXBlOiAnU291cmNlJyxcbiAgICBiaW5kaW5nczogW1ttZXRhT3JDdHJsS2V5LCAnUyddXSxcbiAgICBzaWduYWw6ICdlZGl0b3IuY29kZVNhdmVkJyxcbiAgICBwYXlsb2FkOiBzdGF0ZSA9PiAoe1xuICAgICAgbW9kdWxlU2hvcnRpZDogc3RhdGUuZWRpdG9yLmN1cnJlbnRNb2R1bGUuc2hvcnRpZCxcbiAgICB9KSxcbiAgfSxcblxuICAnc291cmNlLm1vZHVsZXMuc2F2ZS1hbGwnOiB7XG4gICAgdGl0bGU6ICdTYXZlIEFsbCBNb2RpZmllZCBGaWxlcycsXG4gICAgdHlwZTogJ1NvdXJjZScsXG4gICAgYmluZGluZ3M6IFtbbWV0YU9yQ3RybEtleSwgJ1NoaWZ0JywgJ1MnXV0sXG4gICAgc2lnbmFsOiAnZWRpdG9yLnNhdmVDbGlja2VkJyxcbiAgfSxcbn07XG4iXX0=